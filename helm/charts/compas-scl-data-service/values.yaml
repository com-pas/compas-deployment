# Default values for CoMPAS SCL Data Service
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: lfenergy/compas-scl-data-service
  pullPolicy: IfNotPresent
  tag: "0.15.6-postgresql"

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

extraArgs: []

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  create: false
  automount: true
  annotations: {}
  name: ""

# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

env:
  - name: POSTGRESQL_HOST
    value: postgres-compas
  - name: POSTGRESQL_DB
    value: compas
  - name: JWT_VERIFY_KEY
    value: http://keycloak:8080/auth/realms/compas/protocol/openid-connect/certs
  - name: JWT_VERIFY_ISSUER
    value: http://${COMPAS_HOSTNAME}/auth/realms/compas
  - name: JWT_VERIFY_CLIENT_ID
    value: scl-data-service
  - name: JWT_GROUPS_PATH
    value: resource_access/scl-data-service/roles
  - name: USERINFO_NAME_CLAIMNAME
    value: name
  - name: USERINFO_WHO_CLAIMNAME
    value: name
  - name: USERINFO_SESSION_WARNING
    value: "20"
  - name: USERINFO_SESSION_EXPIRES
    value: "30"
  - name: POSTGRESQL_USERNAME
    value: compas
  - name: POSTGRESQL_PASSWORD
    value: Xxunztz8y5Ffxu2

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: []
    #- host: chart-example.local
    #  paths:
    #    - path: /
    #      pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
